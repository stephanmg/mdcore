.TH "/Users/stephan/Code/git/mdcore/src/exclusion.c" 3 "Thu Apr 24 2014" "Version 0.1.5" "mdcore" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/stephan/Code/git/mdcore/src/exclusion.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./config\&.h'\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <pthread\&.h>\fP
.br
\fC#include <math\&.h>\fP
.br
\fC#include <float\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <limits\&.h>\fP
.br
\fC#include 'cycle\&.h'\fP
.br
\fC#include 'errs\&.h'\fP
.br
\fC#include 'fptype\&.h'\fP
.br
\fC#include 'lock\&.h'\fP
.br
\fC#include 'part\&.h'\fP
.br
\fC#include 'potential\&.h'\fP
.br
\fC#include 'potential_eval\&.h'\fP
.br
\fC#include 'cell\&.h'\fP
.br
\fC#include 'space\&.h'\fP
.br
\fC#include 'engine\&.h'\fP
.br
\fC#include 'exclusion\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBerror\fP(\fBid\fP)   ( \fBexclusion_err\fP = \fBerrs_register\fP( \fBid\fP , \fBexclusion_err_msg\fP[-(\fBid\fP)] , __LINE__ , __FUNCTION__ , __FILE__ ) )"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBexclusion_eval\fP (struct \fBexclusion\fP *b, int N, struct \fBengine\fP *\fBe\fP, double *epot_out)"
.br
.RI "\fIEvaluate a list of exclusioned interactoins\&. \fP"
.ti -1c
.RI "int \fBexclusion_evalf\fP (struct \fBexclusion\fP *b, int N, struct \fBengine\fP *\fBe\fP, \fBFPTYPE\fP *\fBf\fP, double *epot_out)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int \fBexclusion_err\fP = \fBexclusion_err_ok\fP"
.br
.ti -1c
.RI "unsigned int \fBexclusion_rcount\fP = 0"
.br
.ti -1c
.RI "char * \fBexclusion_err_msg\fP [2]"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define error(\fBid\fP)   ( \fBexclusion_err\fP = \fBerrs_register\fP( \fBid\fP , \fBexclusion_err_msg\fP[-(\fBid\fP)] , __LINE__ , __FUNCTION__ , __FILE__ ) )"

.SH "Function Documentation"
.PP 
.SS "int exclusion_eval (struct \fBexclusion\fP *b, intN, struct \fBengine\fP *e, double *epot_out)"

.PP
Evaluate a list of exclusioned interactoins\&. 
.PP
\fBParameters:\fP
.RS 4
\fIb\fP Pointer to an array of \fBexclusion\fP\&. 
.br
\fIN\fP Nr of exclusions in \fCb\fP\&. 
.br
\fIe\fP Pointer to the \fBengine\fP in which these exclusions are evaluated\&. 
.br
\fIepot_out\fP Pointer to a double in which to aggregate the potential energy\&.
.RE
.PP
\fBReturns:\fP
.RS 4
\fBexclusion_err_ok\fP or <0 on error (see \fBexclusion_err\fP) 
.RE
.PP

.SS "int exclusion_evalf (struct \fBexclusion\fP *b, intN, struct \fBengine\fP *e, \fBFPTYPE\fP *f, double *epot_out)"

.SH "Variable Documentation"
.PP 
.SS "int exclusion_err = \fBexclusion_err_ok\fP"
The ID of the last error\&. 
.SS "char* exclusion_err_msg[2]"
\fBInitial value:\fP
.PP
.nf
= {
        "Nothing bad happened\&.",
    "An unexpected NULL pointer was encountered\&."
        }
.fi
.SS "unsigned int exclusion_rcount = 0"

.SH "Author"
.PP 
Generated automatically by Doxygen for mdcore from the source code\&.
